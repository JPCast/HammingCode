|HammingDecoder
clk => Controlo:Controlo_Unidade.clk
clk => flipFlopDSimul:flipFlopD1.clk
clk => flipFlopDSimul:flipFlopD2.clk
clk => flipFlopDSimul:flipFlopD3.clk
clk => flipFlopDSimul:flipFlopD4.clk
y => And_operator:and1.a
y => And_operator:and2.a
y => And_operator:and3.a
y => And_operator:and4.a
m_linha[0] <= xor_operator:xor1.cout
m_linha[1] <= xor_operator:xor2.cout
m_linha[2] <= xor_operator:xor3.cout
m_linha[3] <= xor_operator:xor4.cout
m_linha[4] <= <GND>
m_linha[5] <= <GND>
m_linha[6] <= <GND>
m_linha[7] <= <GND>
m_linha[8] <= <GND>
m_linha[9] <= <GND>
m_linha[10] <= <GND>


|HammingDecoder|Controlo:Controlo_Unidade
clk => Counter:Counter1.clk
sel_mux <= FullAdder4bit:Counter2.cout
dataOut[0] <= ROM:Matrix_H.dataOut[0]
dataOut[1] <= ROM:Matrix_H.dataOut[1]
dataOut[2] <= ROM:Matrix_H.dataOut[2]
dataOut[3] <= ROM:Matrix_H.dataOut[3]


|HammingDecoder|Controlo:Controlo_Unidade|FullAdder4bit:Counter2
a[0] => FullAdder:bit0.a
a[1] => FullAdder:bit1.a
a[2] => FullAdder:bit2.a
a[3] => FullAdder:bit3.a
b[0] => FullAdder:bit0.b
b[1] => FullAdder:bit1.b
b[2] => FullAdder:bit2.b
b[3] => FullAdder:bit3.b
cin => FullAdder:bit0.cin
cout <= FullAdder:bit3.cout
s[0] <= FullAdder:bit0.s
s[1] <= FullAdder:bit1.s
s[2] <= FullAdder:bit2.s
s[3] <= FullAdder:bit3.s


|HammingDecoder|Controlo:Controlo_Unidade|FullAdder4bit:Counter2|FullAdder:bit0
a => s.IN0
a => cout.IN0
a => cout.IN0
b => s.IN1
b => cout.IN1
b => cout.IN1
cin => s.IN1
cin => cout.IN1
s <= s.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|Controlo:Controlo_Unidade|FullAdder4bit:Counter2|FullAdder:bit1
a => s.IN0
a => cout.IN0
a => cout.IN0
b => s.IN1
b => cout.IN1
b => cout.IN1
cin => s.IN1
cin => cout.IN1
s <= s.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|Controlo:Controlo_Unidade|FullAdder4bit:Counter2|FullAdder:bit2
a => s.IN0
a => cout.IN0
a => cout.IN0
b => s.IN1
b => cout.IN1
b => cout.IN1
cin => s.IN1
cin => cout.IN1
s <= s.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|Controlo:Controlo_Unidade|FullAdder4bit:Counter2|FullAdder:bit3
a => s.IN0
a => cout.IN0
a => cout.IN0
b => s.IN1
b => cout.IN1
b => cout.IN1
cin => s.IN1
cin => cout.IN1
s <= s.DB_MAX_OUTPUT_PORT_TYPE
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|Controlo:Controlo_Unidade|Counter:Counter1
clk => s[0]~reg0.CLK
clk => s[1]~reg0.CLK
clk => s[2]~reg0.CLK
clk => s[3]~reg0.CLK
a[0] => Add0.IN8
a[1] => Add0.IN7
a[2] => Add0.IN6
a[3] => Add0.IN5
s[0] <= s[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
s[1] <= s[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
s[2] <= s[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
s[3] <= s[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|Controlo:Controlo_Unidade|ROM:Matrix_H
address[0] => Mux0.IN19
address[0] => Mux1.IN19
address[0] => Mux2.IN19
address[0] => Mux3.IN19
address[1] => Mux0.IN18
address[1] => Mux1.IN18
address[1] => Mux2.IN18
address[1] => Mux3.IN18
address[2] => Mux0.IN17
address[2] => Mux1.IN17
address[2] => Mux2.IN17
address[2] => Mux3.IN17
address[3] => Mux0.IN16
address[3] => Mux1.IN16
address[3] => Mux2.IN16
address[3] => Mux3.IN16
dataOut[0] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE
dataOut[1] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
dataOut[2] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
dataOut[3] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|And_operator:and1
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|And_operator:and2
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|And_operator:and3
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|And_operator:and4
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|flipFlopDSimul:flipFlopD1
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|flipFlopDSimul:flipFlopD2
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|flipFlopDSimul:flipFlopD3
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|flipFlopDSimul:flipFlopD4
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|xor_operator:xor1
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|xor_operator:xor2
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|xor_operator:xor3
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


|HammingDecoder|xor_operator:xor4
a => cout.IN0
b => cout.IN1
cout <= cout.DB_MAX_OUTPUT_PORT_TYPE


