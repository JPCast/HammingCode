------------------------------------------------------------------------------------------------
---------------------------- Adder -------------------------------------------------------------

library IEEE;
use IEEE.std_logic_1164.all;


entity Adder is
	port(a, b : in std_logic;
			cout : out std_logic);
end Adder;

architecture Behavioral of Adder is
begin
	cout <= a and b;
end Behavioral;



------------------------------------------------------------------------------------------------
---------------------------- xor ---------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;

entity xor_operator is
	port(a, b : in std_logic;
			cout : out std_logic);
end xor_operator;

architecture Behavioral of xor_operator is
begin
	cout <= a xor b;
end Behavioral;


------------------------------------------------------------------------------------------------
---------------------------- MUX 2_1  ----------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;

entity mux is
	port(		sel : in std_logic;
				a   : in std_logic_vector(10 downto 0);
				b   : in std_logic_vector(3 downto 0);
			mlinha : out std_logic);
end xor_operator;

architecture Behavioral of xor_operator is
begin
	if(sel='1')
		mlinha<=a;
	else
		mlinha<=b;
	end if
end Behavioral;


------------------------------------------------------------------------------------------------
---------------------------- MUX 4_1  ----------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;

entity mux is
	port(		sel1 : in std_logic;
				sel2 : in std_logic;
				a   : in std_logic;
				b   : in std_logic;
				c	 : in std_logic;
				d   : in std_logic;
			mlinha : out std_logic);
end xor_operator;

architecture Behavioral of xor_operator is
begin
	if (Sel1 ='0' and S2 = '0') then
      mlinha <= a;

  elsif (Sel1 ='1' and Sel2 = '0') then
		mlinha <= b;
  
  elsif (Sel1 ='0' and Sel2 = '1') then
		mlinha <= c;
  
  else
		mlinha <= d;  
  
  end if;
end  Behavioral;


-------------------------------------------------------------------------------------------------------------------
---------------------------- Flip flop D---------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.all;

ENTITY flipFlopDSimul IS
  PORT (clk, D: IN STD_LOGIC;
        Q     : OUT STD_LOGIC);
END flipFlopDSimul;

ARCHITECTURE behavior OF flipFlopDSimul IS
BEGIN
  PROCESS (clk)
  BEGIN
	 if(rising_edge(clk)) then
		Q<=D;
    END IF;
  END PROCESS;
END behavior;

-------------------------------------------------------------------------------------------------------------------
---------------------------- Flip flop D 4 por 4-------------------------------------------------------------------
LIBRARY ieee;

library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity flipflop4_4 is
	port(clk : in std_logic;
			D  : in std_logic_vector(3 downto 0);
			Q  : out std_logic_vector(3 downto 0));
end flipflop4_4;

architecture Structural of flipflop4_4 is
	component flipFlopDSimul
		port(clk, D : IN STD_LOGIC;
				Q     : OUT STD_LOGIC);
	end component;

begin
	flipFlopD0_Q0: flipFlopDSimul port map(clk, D(0), Q(0));
	flipFlopD1_Q1: flipFlopDSimul port map(clk, D(1), Q(1));
	flipFlopD2_Q2: flipFlopDSimul port map(clk, D(2), Q(2));
	flipFlopD3_Q3: flipFlopDSimul port map(clk, D(3), Q(3));
end Structural;